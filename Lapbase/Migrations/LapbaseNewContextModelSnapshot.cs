// <auto-generated />
using System;
using Lapbase.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Lapbase.Migrations
{
    [DbContext(typeof(LapbaseNewContext))]
    partial class LapbaseNewContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Lapbase.Models.Advisor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Advisor");

                    b.HasData(
                        new
                        {
                            Id = 1
                        });
                });

            modelBuilder.Entity("Lapbase.Models.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CaloryCount");

                    b.Property<Guid?>("ExerciseListId");

                    b.Property<string>("Name");

                    b.Property<int>("PatientId");

                    b.Property<string>("pictureUrl");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseListId");

                    b.HasIndex("PatientId");

                    b.ToTable("Exercise");
                });

            modelBuilder.Entity("Lapbase.Models.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Date");

                    b.Property<int>("PatientId");

                    b.Property<int>("Type");

                    b.Property<string>("content");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("Lapbase.Models.Food", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CalorieCount");

                    b.Property<string>("Name");

                    b.Property<int>("PatientId");

                    b.Property<string>("Unit");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Food");

                    b.HasData(
                        new
                        {
                            Id = new Guid("581f0299-0320-466c-bf34-8e38f9b7c0a6"),
                            CalorieCount = 295,
                            Name = "Burger",
                            PatientId = 1,
                            Unit = "piece"
                        },
                        new
                        {
                            Id = new Guid("dc194663-6107-4c52-967e-0320967aba1d"),
                            CalorieCount = 40,
                            Name = "Onion",
                            PatientId = 1,
                            Unit = "piece"
                        },
                        new
                        {
                            Id = new Guid("f050049f-a7b4-4a35-91ba-e29f5c3538d5"),
                            CalorieCount = 90,
                            Name = "Uncle Keith's Kappuccino",
                            PatientId = 1,
                            Unit = "cup"
                        });
                });

            modelBuilder.Entity("Lapbase.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvisorId");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Username");

                    b.Property<DateTimeOffset>("ValidFrom");

                    b.Property<DateTimeOffset>("ValidTo");

                    b.Property<DateTimeOffset>("WhenCreated");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdvisorId = 1,
                            Deleted = false,
                            Username = "test@test.com",
                            ValidFrom = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ValidTo = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            WhenCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Lapbase.Models.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdvisorId");

                    b.Property<int>("PatientId");

                    b.Property<int>("Repetition");

                    b.Property<int>("RepetitionInterval");

                    b.Property<DateTimeOffset>("StartDate");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Task");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5823f527-72f4-47fb-a87d-7cb6f9a8b87a"),
                            AdvisorId = 1,
                            PatientId = 1,
                            Repetition = 1,
                            RepetitionInterval = 1,
                            StartDate = new DateTimeOffset(new DateTime(2019, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Type = 0
                        });
                });

            modelBuilder.Entity("Lapbase.Models.TaskInput", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateEntered");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<Guid>("TaskId");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskInput");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TaskInput");
                });

            modelBuilder.Entity("Lapbase.Models.ExerciseList", b =>
                {
                    b.HasBaseType("Lapbase.Models.TaskInput");

                    b.Property<string>("Reps");

                    b.HasDiscriminator().HasValue("ExerciseList");
                });

            modelBuilder.Entity("Lapbase.Models.FoodIntakeList", b =>
                {
                    b.HasBaseType("Lapbase.Models.TaskInput");

                    b.Property<string>("Food");

                    b.Property<string>("Quantity");

                    b.HasDiscriminator().HasValue("FoodIntakeList");
                });

            modelBuilder.Entity("Lapbase.Models.Exercise", b =>
                {
                    b.HasOne("Lapbase.Models.ExerciseList")
                        .WithMany("Exercises")
                        .HasForeignKey("ExerciseListId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Lapbase.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Lapbase.Models.Feedback", b =>
                {
                    b.HasOne("Lapbase.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Lapbase.Models.Food", b =>
                {
                    b.HasOne("Lapbase.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Lapbase.Models.Patient", b =>
                {
                    b.HasOne("Lapbase.Models.Advisor", "Advisor")
                        .WithMany("Patients")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Lapbase.Models.Task", b =>
                {
                    b.HasOne("Lapbase.Models.Advisor", "Advisor")
                        .WithMany()
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Lapbase.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Lapbase.Models.TaskInput", b =>
                {
                    b.HasOne("Lapbase.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
